generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model items {
  id               String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String            @db.VarChar(200)
  description      String?
  category         String?           @db.VarChar(50)
  condition        String?           @db.VarChar(50)
  imageUrl         String?           @map("image_url") @db.VarChar(500)
  createdBy        String?           @map("created_by") @db.Uuid
  createdAt        DateTime?         @default(now()) @map("created_at") @db.Timestamptz(6)
  travelers        travelers?        @relation(fields: [createdBy], references: [id], onUpdate: NoAction)
  offers           offers[]
  proposedTrades   proposedTrades[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model messages {
  id                                         String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  offerId                                    String?          @map("offer_id") @db.Uuid
  senderId                                   String?          @map("sender_id") @db.Uuid
  recipientId                                String?          @map("recipient_id") @db.Uuid
  proposedTradeId                            String?          @map("proposed_trade_id") @db.Uuid
  content                                    String
  isRead                                     Boolean?         @default(false) @map("is_read")
  createdAt                                  DateTime?        @default(now()) @map("created_at") @db.Timestamptz(6)
  offer                                      offers?          @relation(fields: [offerId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  recipient                                  travelers?       @relation("messages_recipient_idTotravelers", fields: [recipientId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  sender                                     travelers?       @relation("messages_sender_idTotravelers", fields: [senderId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  proposedTrade                              proposedTrades?  @relation(fields: [proposedTradeId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([offerId], map: "idx_messages_offer")
  @@index([recipientId, isRead], map: "idx_messages_recipient")
  @@index([proposedTradeId], map: "idx_messages_proposed_trade")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model offers {
  id               String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  travelerId       String?           @map("traveler_id") @db.Uuid
  itemId           String?           @map("item_id") @db.Uuid
  title            String            @db.VarChar(200)
  description      String?
  lookingFor       String[]          @map("looking_for")
  status           String?           @default("active") @db.VarChar(20)
  type             String            @default("offer") @db.VarChar(10)
  askDescription   String?           @map("ask_description") @db.VarChar(500)
  latitude         Decimal           @db.Decimal(10, 8)
  longitude        Decimal           @db.Decimal(11, 8)
  locationName     String?           @map("location_name") @db.VarChar(200)
  city             String?           @db.VarChar(100)
  country          String?           @db.VarChar(100)
  displayLocation  String?           @map("display_location") @db.VarChar(200)
  createdAt        DateTime?         @default(now()) @map("created_at") @db.Timestamptz(6)
  expiresAt        DateTime?         @map("expires_at") @db.Timestamptz(6)
  messages         messages[]
  proposedTrades   proposedTrades[]
  item             items?            @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  traveler         travelers?        @relation(fields: [travelerId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([itemId], map: "idx_offers_item")
  @@index([latitude, longitude], map: "idx_offers_location")
  @@index([status], map: "idx_offers_status")
  @@index([travelerId], map: "idx_offers_traveler")
}

model travelers {
  id                                        String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                                     String            @unique @db.VarChar(255)
  bio                                       String?
  avatarUrl                                 String?           @map("avatar_url") @db.VarChar(500)
  languages                                 String[]          @default([])
  countriesVisited                          String[]          @default([]) @map("countries_visited")
  createdAt                                 DateTime?         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                                 DateTime?         @default(now()) @map("updated_at") @db.Timestamptz(6)
  password                                  String?           @db.VarChar(255)
  firstName                                 String            @map("first_name") @db.VarChar(50)
  lastName                                  String            @map("last_name") @db.VarChar(50)
  lastLatitude                              Decimal?          @map("last_latitude") @db.Decimal(10, 8)
  lastLongitude                             Decimal?          @map("last_longitude") @db.Decimal(11, 8)
  lastCity                                  String?           @map("last_city") @db.VarChar(100)
  lastCountry                               String?           @map("last_country") @db.VarChar(100)
  items                                     items[]
  messagesReceived                          messages[]        @relation("messages_recipient_idTotravelers")
  messagesSent                              messages[]        @relation("messages_sender_idTotravelers")
  offers                                    offers[]
  proposedTrades                            proposedTrades[]
  passwordResetTokens                       passwordResetTokens[]
  reviewsGiven                              reviews[]         @relation("reviews_reviewer")
  reviewsReceived                           reviews[]         @relation("reviews_reviewee")
  reputationScore                           userReputationScores?
}

model proposedTrades {
  id               String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  offerId          String     @map("offer_id") @db.Uuid
  proposerId       String     @map("proposer_id") @db.Uuid
  offeredItemId    String     @map("offered_item_id") @db.Uuid
  status           String     @default("pending") @db.VarChar(20) // pending, accepted, rejected, withdrawn, unavailable
  createdAt        DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime   @default(now()) @map("updated_at") @db.Timestamptz(6)
  
  offer            offers     @relation(fields: [offerId], references: [id], onDelete: Cascade)
  proposer         travelers  @relation(fields: [proposerId], references: [id], onDelete: Cascade)
  offeredItem      items      @relation(fields: [offeredItemId], references: [id])
  messages         messages[]
  reviews          reviews[]
  exchangeDate     tradeExchangeDates?
  
  @@map("proposed_trades")
  @@index([offerId], map: "idx_proposed_trades_offer")
  @@index([proposerId], map: "idx_proposed_trades_proposer")
  @@index([status], map: "idx_proposed_trades_status")
}

model passwordResetTokens {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  token      String    @unique @db.VarChar(255)
  userId     String    @map("user_id") @db.Uuid
  expiresAt  DateTime  @map("expires_at") @db.Timestamptz(6)
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  
  user       travelers @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("password_reset_tokens")
  @@index([token])
  @@index([userId])
}

model reviews {
  id               String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  proposedTradeId  String     @map("proposed_trade_id") @db.Uuid
  reviewerId       String     @map("reviewer_id") @db.Uuid
  revieweeId       String     @map("reviewee_id") @db.Uuid
  rating           Int        @db.SmallInt
  content          String?
  isEdited         Boolean    @default(false) @map("is_edited")
  createdAt        DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime   @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  
  proposedTrade    proposedTrades @relation(fields: [proposedTradeId], references: [id], onDelete: Cascade)
  reviewer         travelers      @relation("reviews_reviewer", fields: [reviewerId], references: [id], onDelete: Cascade)
  reviewee         travelers      @relation("reviews_reviewee", fields: [revieweeId], references: [id], onDelete: Cascade)
  
  @@unique([proposedTradeId, reviewerId])
  @@index([revieweeId])
  @@index([proposedTradeId])
}

model tradeExchangeDates {
  id                   String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  proposedTradeId      String     @map("proposed_trade_id") @db.Uuid
  extractedDate        DateTime   @map("extracted_date") @db.Timestamptz(6)
  extractionMethod     String     @map("extraction_method") @db.VarChar(20)
  isReviewRequestSent  Boolean    @default(false) @map("is_review_request_sent")
  reviewRequestSentAt  DateTime?  @map("review_request_sent_at") @db.Timestamptz(6)
  createdAt            DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime   @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  
  proposedTrade        proposedTrades @relation(fields: [proposedTradeId], references: [id], onDelete: Cascade)
  
  @@map("trade_exchange_dates")
  @@unique([proposedTradeId])
  @@index([extractedDate, isReviewRequestSent])
}

model userReputationScores {
  userId           String    @id @map("user_id") @db.Uuid
  totalReviews     Int       @default(0) @map("total_reviews")
  averageRating    Decimal   @default(0) @map("average_rating") @db.Decimal(3, 2)
  credibilityScore Decimal   @default(1) @map("credibility_score") @db.Decimal(3, 2)
  lastCalculated   DateTime  @default(now()) @map("last_calculated") @db.Timestamptz(6)
  
  user             travelers @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_reputation_scores")
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Traveler {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email            String    @unique @db.VarChar(255)
  firstName        String    @map("first_name") @db.VarChar(50)
  lastName         String    @map("last_name") @db.VarChar(50)
  bio              String?
  avatarUrl        String?   @map("avatar_url") @db.VarChar(500)
  createdAt        DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  password         String?   @db.VarChar(255)
  items            Item[]
  receivedMessages Message[] @relation("ReceivedMessages")
  sentMessages     Message[] @relation("SentMessages")
  offers           Offer[]

  @@map("travelers")
}

model Item {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String    @db.VarChar(200)
  description String?
  category    String?   @db.VarChar(50)
  condition   String?   @db.VarChar(50)
  imageUrl    String?   @map("image_url") @db.VarChar(500)
  createdBy   String?   @map("created_by") @db.Uuid
  createdAt   DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  creator     Traveler? @relation(fields: [createdBy], references: [id], onUpdate: NoAction)
  offers      Offer[]

  @@map("items")
}

model Offer {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  travelerId   String?   @map("traveler_id") @db.Uuid
  itemId       String?   @map("item_id") @db.Uuid
  title        String    @db.VarChar(200)
  description  String?
  status       String?   @default("active") @db.VarChar(20)
  latitude     Decimal   @db.Decimal(10, 8)
  longitude    Decimal   @db.Decimal(11, 8)
  locationName String?   @map("location_name") @db.VarChar(200)
  createdAt    DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  expiresAt    DateTime? @map("expires_at") @db.Timestamptz(6)
  messages     Message[]
  item         Item?     @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  traveler     Traveler? @relation(fields: [travelerId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([itemId], map: "idx_offers_item")
  @@index([latitude, longitude], map: "idx_offers_location")
  @@index([status], map: "idx_offers_status")
  @@index([travelerId], map: "idx_offers_traveler")
  @@map("offers")
}

model Message {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  offerId     String?   @map("offer_id") @db.Uuid
  senderId    String?   @map("sender_id") @db.Uuid
  recipientId String?   @map("recipient_id") @db.Uuid
  content     String
  isRead      Boolean?  @default(false) @map("is_read")
  createdAt   DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  offer       Offer?    @relation(fields: [offerId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  recipient   Traveler? @relation("ReceivedMessages", fields: [recipientId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  sender      Traveler? @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([offerId], map: "idx_messages_offer")
  @@index([recipientId, isRead], map: "idx_messages_recipient")
  @@map("messages")
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model items {
  id               String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String            @db.VarChar(200)
  description      String?
  category         String?           @db.VarChar(50)
  condition        String?           @db.VarChar(50)
  image_url        String?           @db.VarChar(500)
  created_by       String?           @db.Uuid
  created_at       DateTime?         @default(now()) @db.Timestamptz(6)
  travelers        travelers?        @relation(fields: [created_by], references: [id], onUpdate: NoAction)
  offers           offers[]
  proposed_trades  proposed_trades[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model messages {
  id                                         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  offer_id                                   String?    @db.Uuid
  sender_id                                  String?    @db.Uuid
  recipient_id                               String?    @db.Uuid
  content                                    String
  is_read                                    Boolean?   @default(false)
  created_at                                 DateTime?  @default(now()) @db.Timestamptz(6)
  offers                                     offers?    @relation(fields: [offer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  travelers_messages_recipient_idTotravelers travelers? @relation("messages_recipient_idTotravelers", fields: [recipient_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  travelers_messages_sender_idTotravelers    travelers? @relation("messages_sender_idTotravelers", fields: [sender_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([offer_id], map: "idx_messages_offer")
  @@index([recipient_id, is_read], map: "idx_messages_recipient")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model offers {
  id               String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  traveler_id      String?           @db.Uuid
  item_id          String?           @db.Uuid
  title            String            @db.VarChar(200)
  description      String?
  status           String?           @default("active") @db.VarChar(20)
  latitude         Decimal           @db.Decimal(10, 8)
  longitude        Decimal           @db.Decimal(11, 8)
  location_name    String?           @db.VarChar(200)
  created_at       DateTime?         @default(now()) @db.Timestamptz(6)
  expires_at       DateTime?         @db.Timestamptz(6)
  messages         messages[]
  proposed_trades  proposed_trades[]
  items            items?            @relation(fields: [item_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  travelers        travelers?        @relation(fields: [traveler_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([item_id], map: "idx_offers_item")
  @@index([latitude, longitude], map: "idx_offers_location")
  @@index([status], map: "idx_offers_status")
  @@index([traveler_id], map: "idx_offers_traveler")
}

model travelers {
  id                                        String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                                     String     @unique @db.VarChar(255)
  bio                                       String?
  avatar_url                                String?    @db.VarChar(500)
  created_at                                DateTime?  @default(now()) @db.Timestamptz(6)
  updated_at                                DateTime?  @default(now()) @db.Timestamptz(6)
  password                                  String?    @db.VarChar(255)
  first_name                                String     @db.VarChar(50)
  last_name                                 String     @db.VarChar(50)
  items                                     items[]
  messages_messages_recipient_idTotravelers messages[] @relation("messages_recipient_idTotravelers")
  messages_messages_sender_idTotravelers    messages[] @relation("messages_sender_idTotravelers")
  offers                                    offers[]
  proposed_trades                           proposed_trades[]
}

model proposed_trades {
  id               String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  offer_id         String     @db.Uuid
  proposer_id      String     @db.Uuid
  offered_item_id  String     @db.Uuid
  status           String     @default("pending") @db.VarChar(20) // pending, accepted, rejected, withdrawn
  created_at       DateTime   @default(now()) @db.Timestamptz(6)
  updated_at       DateTime   @default(now()) @db.Timestamptz(6)
  
  offer            offers     @relation(fields: [offer_id], references: [id], onDelete: Cascade)
  proposer         travelers  @relation(fields: [proposer_id], references: [id], onDelete: Cascade)
  offered_item     items      @relation(fields: [offered_item_id], references: [id])
  
  @@index([offer_id], map: "idx_proposed_trades_offer")
  @@index([proposer_id], map: "idx_proposed_trades_proposer")
  @@index([status], map: "idx_proposed_trades_status")
}
